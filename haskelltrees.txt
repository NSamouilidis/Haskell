data BinaryTree a = Empty | Node a (BinaryTree a) (BinaryTree a)
  deriving (Show, Eq)

myBinaryTree :: BinaryTree Int
myBinaryTree = Node 5
          (Node 3 (Node 1 Empty Empty) (Node 4 Empty Empty))
          (Node 9 (Node 8 (Node 6 Empty Empty) Empty) Empty)
-- In order  [2,7,5,6,11,3,8,4,9]
-- Pre order [3,7,2,6,5,11,8,9,4]
-- Post oder [2,5,11,6,7,4,9,8,3]
countNodes :: BinaryTree a -> Int
countNodes Empty = 0
countNodes (Node _ left right) = 1 + countNodes left + countNodes right

maxDepth :: BinaryTree a -> Int
maxDepth Empty = 0
maxDepth (Node _ left right) = 1 + max (maxDepth left) (maxDepth right)

countLeaves :: BinaryTree a -> Int
countLeaves Empty = 0
countLeaves (Node _ Empty Empty) = 1
countLeaves (Node _ left right) = countLeaves(left) + countLeaves(right)

checkLeaves :: BinaryTree a -> Bool
checkLeaves Empty = True
checkLeaves (Node _ Empty Empty) = True
checkLeaves (Node _ left right) = checkLeaves left && checkLeaves right

postOrder :: BinaryTree a -> [a]
postOrder Empty = []
postOrder (Node value left right) = postOrder left ++ postOrder right ++ [value]

inOrder :: BinaryTree a -> [a]
inOrder Empty = []
inOrder (Node  value left  right) = inOrder left ++ [value]  ++ inOrder right 

preOrder :: BinaryTree a -> [a]
preOrder Empty = []
preOrder (Node  value left  right) =  [value] ++ preOrder left  ++ preOrder right 

main :: IO ()
main = do
  print (myBinaryTree)
  print (countNodes myBinaryTree)
  print (maxDepth myBinaryTree)
  print (countLeaves myBinaryTree)
  print (checkLeaves myBinaryTree)
  print (postOrder myBinaryTree) -- [1,4,3,6,8,9,5]
  print (inOrder myBinaryTree) -- [1,3,4,5,6,8,9]
  print (preOrder myBinaryTree) -- [5,3,1,4,9,8,6]
 
